{
  "name": "gnuplot",
  "version": "0.3.1",
  "description": "node gnuplot wrapper",
  "main": "gnuplot.js",
  "scripts": {
    "test": "node gnuplot-test.js"
  },
  "author": {
    "name": "davvo"
  },
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "git://github.com/davvo/node-gnuplot.git"
  },
  "keywords": [
    "gnuplot",
    "plot"
  ],
  "bugs": {
    "url": "https://github.com/davvo/node-gnuplot/issues"
  },
  "homepage": "https://github.com/davvo/node-gnuplot",
  "dependencies": {
    "comandante": "0.0.1"
  },
  "readme": "node-gnuplot\n============\n\nA super-thin wrapper around [gnuplot](http://www.gnuplot.info/) for node.js\n\n## example\n\n``` js\nvar gnuplot = require('gnuplot');\ngnuplot()\n    .set('term png')\n    .set('output \"out.png\"')\n    .set('title \"Some Math Functions\"')\n    .set('xrange [-10:10]')\n    .set('yrange [-2:2]')\n    .set('zeroaxis')\n    .plot('(x/4)**2, sin(x), 1/x')\n    .end();\n```\nYou can use streams!\n\n``` js\nvar data = fs.createReadStream('input.dat'),\n    out = fs.createWriteStream('output.svg'),\n    plotter = gnuplot().set('term svg');\n    \ndata.pipe(plotter).pipe(out);\n```\n\n# methods\n\n``` js\nvar gnuplot = require('gnuplot')\n```\n\n## gnuplot()\n\nSpawn a new gnuplot process and return a duplex stream combining `stdout` and `stdin`. \n\n## gnuplot.print(data, options={})\n\nWrite data to stdin of the gnuplot process. If the stream should be closed after the write, pass `{end: true}` as options.\n\n## gnuplot.println(data, options={})\n\nSame as `gnuplot.print(data + '\\n', options)`\n\n## gnuplot.set(data, options={})\n\nSame as `gnuplot.println('set ' + data, options)`\n\n## gnuplot.unset(data, options={})\n\nSame as `gnuplot.println('unset ' + data, options)`\n\n## gnuplot.plot(data, options={})\n\nSame as `gnuplot.println('plot ' + data, options)`\n\n## gnuplot.splot(data, options={})\n\nSame as `gnuplot.println('splot ' + data, options)`\n\n## gnuplot.replot(data='', options={})\n\nSame as `gnuplot.println('replot ' + data, options)`\n\nAll of the above functions returns the gnuplot object and can be chained together:\n\n``` js\ngnuplot()\n    .set('term png')\n    .unset('output')\n    .plot('[-6:6] sin(x)')\n    .end();\n```\n\nTo automatically call [end()](http://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback) on the input stream after a command, pass `{end: true}` as options:\n\n``` js\ngnuplot()\n    .set('term png')\n    .unset('output')\n    .plot('[-6:6] sin(x)', {end: true})\n    .pipe(fs.createWriteStream('out.png'));\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install gnuplot\n```\n\nYou need to have [gnuplot](http://www.gnuplot.info/) installed. On OSX you can do this with [homebrew](http://brew.sh/):\n\n```\nbrew install gnuplot\n```\n\n\n# license\n\nISC\n",
  "readmeFilename": "README.md",
  "_id": "gnuplot@0.3.1",
  "dist": {
    "shasum": "f777536bdd1936059ce07b7437ce9a7a551cde77"
  },
  "_from": "gnuplot@",
  "_resolved": "https://registry.npmjs.org/gnuplot/-/gnuplot-0.3.1.tgz"
}
